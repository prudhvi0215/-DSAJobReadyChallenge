// 5) Level Wise Linked List

class Node
{
  public:
  int data;
  Node *next;
  
  Node(int data)
  {
      this->data = data;
      next = NULL;
  }
};

vector<Node *> levelWiseLLHelper(BinaryTreeNode<int> *root)
{
    vector<Node *> levelHeads;
    
    queue<BinaryTreeNode<int> *> pendingNodes;
    pendingNodes.push(root);
    pendingNodes.push(NULL);
    
    Node *head = NULL;
    Node *tail = NULL;
    
    while(pendingNodes.size()!=0)
    {
        BinaryTreeNode<int> *frontNode = pendingNodes.front();
        pendingNodes.pop();
        
        if(frontNode==NULL){
            levelHeads.push_back(head);
            head=NULL;
            tail=NULL;
            if(pendingNodes.size()!=0){
                pendingNodes.push(NULL);
            }
        } else {
            
            Node *newNode = new Node(frontNode->data);
            
            if(head==NULL){
                head = newNode;
                tail = newNode;
            } else {
                tail->next =  newNode;
                tail = newNode;
            }
            
            if(frontNode->left){
                pendingNodes.push(frontNode->left);
            }
            
            if(frontNode->right){
                pendingNodes.push(frontNode->right);
            }
            
        }
    }
    
    return levelHeads;
}

void levelWiseLL(BinaryTreeNode<int> *root)
{
    if(root==NULL){
        return;
    }
    
    vector<Node *> result = levelWiseLLHelper(root);
    
    for(int i=0;i<result.size();i++)
    {
        Node *node = result[i];
        
        while(node)
        {
            cout<<node->data<<" ";
            node = node->next;
        }
        
        cout<<endl;
    }
    return;
}
